#+HTML:<h1 align="center">GitHub README.org Hacks</h1>
#+HTML: <p align="center"><a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-Document-%2377aa99?style=flat-square&logo=org&logoColor=white"> </a><a href="https://www.gnu.org/software/emacs/"><img src="https://img.shields.io/badge/Made_with-Emacs-blueviolet.svg?style=flat-square&logo=GNU%20Emacs&logoColor=white"></a></p>

#+HTML:<div align="center">
Sharing the undocumented things you can do with GitHub, org-mode, and HTML to make a better README.
#+HTML:</div>

#+BEGIN_EXAMPLE :exports none
TODO:
Warnings
Captions
Notes
LaTeX and Mathematical Expressions
No Web
No Export/Hiding things


GitHub now supports LaTeX syntax

Flesh out this section for math support...

- using HTML and no export


making custom svg

html <warning>

html <kbd> elements

href images can be aligned to center and left and right
can be used to have text on left and images on the right

What is this example block!
https://gist.github.com/ChrisTollefson/a3af6d902a74a0afd1c2d79aadc9bb3f

Need to probably refromat or teach how to do this.

I could use this for the syntax being shown in two different languages.
Is essentially a code block inside of a table.
#+END_EXAMPLE

** Why?
The README, is your primary method to portray information about a repository to the reader. GitHub supports using =org-mode= to create a README, but it's implementation using =org-ruby= neither works as claimed nor is complete.

That's where these hacks come in, primarily using HTML, to get around these limitations, as well as to show some additional possibilities and preferences.

And, I haven't found anyone talking about these techniques, so I thought I would share them. Please consider submitting yours.
** Document Structure
This document covers methods to use org-mode and HTML together. The headings are sorted by the goal we want to achieve, not by the method used to achieve it.

** Table of Contents
- [[#background][Background]]
- [[#html-in-org-documents][HTML in Org Documents]]
- [[#centering--text-alignment][Centering / Text Alignment]]
- [[#underlining-1][Underlining]]
- [[#folding-1][Folding]]
- [[#code][Code]]
  - [[#inline-1][Inline]]
  - [[#block-1][Block]]
- [[#tables][Tables]]
- [[#shields][Shields]]
- [[#emojis][Emojis]]

** Background
GitHub uses [[https://github.com/wallyqs/org-ruby][org-ruby]] to parse and export an org document as HTML, then it is sanitized using their [[https://github.com/gjtorikian/html-pipeline/blob/main/lib/html/pipeline/sanitization_filter.rb][HTML-pipeline]].

These documents allow us to understand what you can and can't do using org-mode and HTML on GitHub, but that work is summarized for you here.
*** org-ruby
Through this, org-mode syntax is translated directly into HTML. The rules for translation are modifiable. See org-ruby for the default translation list.

The problem with this, is that the translations used by GitHub/org-ruby are incomplete. This can be fixed by including a YAML file, but we don't need another file in our repository just for formatting a README.

The point is, that most things you can do with org-mode are supported, but some things are not. For example, headings are translated directly to HTML heading tags (<h1>,<h2>,etc.), tables are translated to table tags (<table>), etc.

#+HTML:<p><ins>However, the following do not work correctly and must be fixed using HTML:</ins></p>
**** Centering
#+HTML:<p>Org-mode's <code>#+BEGIN_CENTER</code> and <code>#+END_CENTER</code> syntax are translated to <code>&lt;div&gt;</code> but it's missing the <code>align="center"</code> attribute.

**** Underlining
Org-mode's underline syntax =_text_= is translated to ~<span style=\"text-decoration:underline;\>~ which is incorrect and not honored by GitHub.

**** Folding
In general this is missing from org-mode, a feature that markdown has and "we" don't.

** HTML in Org Documents
#+HTML:<p align="center">Welcome our Lord and Savior, HTML!</p>

Although this is our primary method of overcoming the limitations of org-ruby and GitHub, it should be noted that HTML offers us so much more than just fixing org-ruby's shortcomings.

Org-mode supports the use of two syntaxes for writing HTML in a document.
*** Inline
Useful for one-liners.

Syntax:
#+BEGIN_SRC
#+HTML:
#+END_SRC

Example:
#+BEGIN_SRC
#+HTML:<p>Some HTML</p>
#+END_SRC

*** Block
Useful for complex or multi-line HTML.

Syntax:
#+HTML:<pre>#+BEGIN_HTML<br>#+END_HTML</pre>

Example:
#+HTML:<pre>#+BEGIN_HTML<br>&lt;div&gt;<br>&lt;p&gt;Some longer HTML!&lt;/p&gt;<br>&lt;/div&gt;<br>#+END_HTML</pre>

*** Advice
Use HTML comments to organize sections in large HTML blocks.

The wording in the comment tag can be formatted any way you choose.

Syntax:
#+BEGIN_SRC
<!-- SECTION:START -->
Some HTML
<!-- SECTION:END -->
#+END_SRC

Example:
#+HTML:<pre>#+BEGIN_HTML<br>&lt;!-- SECTION:START --&gt;<br>Some HTML<br>&lt;!-- SECTION:END --&gt;<br><br>&lt;!-- OTHER_SECTION:START --&gt;<br>Some HTML<br>&lt;!-- OTHER_SECTION:END --&gt;<br>#+HTML_END</pre>

** Centering / Text Alignment
#+HTML:<p>The HTML attribute <code><a href="https://www.geeksforgeeks.org/html-align-attribute/">align</a></code> controls text alignment, including centering.</p>

Syntax:
#+BEGIN_SRC
<element align="center">
Some stuff
</element>
#+END_SRC

Example:
#+HTML:<pre>#+HTML:&lt;div align="center"&gt;some centered stuff&lt;/div&gt;<br><br>or<br><br>#+BEGIN_HTML<br>&lt;div align="center"&gt;<br>some centered stuff<br>&lt;/div&gt;<br>#+END_HTML</pre>
The centering attribute can be applied to many tags, but I recommend keeping it simple.

Recommended tags:
#+BEGIN_EXAMPLE
<div> <-- Recommended over <p>, as it works more often.
<p>
#+END_EXAMPLE

Wrapping any other tags in these results in them being centered, regardless if they can accept the alignment attribute themselves.

Alignment options:
#+BEGIN_EXAMPLE
left
right
center
justify
#+END_EXAMPLE

*** Centering Org Syntax
You can use HTML inline calls to start a center alignment and end it later.

Example:
#+HTML:<pre>#+HTML:&lt;div align="center"&gt;<br>* Org Heading<br>  Some text.<br>#+HTML:&lt;/div&gt;</pre>

Result:
#+HTML:<div align="center">
**** Org Heading
Some text.
#+HTML:</div>
*** Centering Org Tables
Centering org syntax includes the centering of org-tables.

Example:
#+HTML:<pre>#+HTML:&lt;div align="center"&gt;<br>| org | table |<br>| foo | bar  |<br>#+HTML:&lt;/div&gt;</pre>

Result:
#+HTML:<div align="center">
| org | table |
| foo | bar   |
#+HTML:</div>

*** Centering Code Blocks
It's also possible to center the text inside of a code block, not the block itself.

This is useful for posting ASCII art to your README.

Just use the div centering syntax on a code block. Either all in one or using starting the centering with an HTML inline call and closing it later, like in the previous example.

Syntax:
#+HTML:<pre>#+HTML:&lt;div align="center"&gt;<br>HTML or org code block<br>&lt;/div&gt;<br>&lt;/pre&gt;<br><br>or<br><br>#+HTML:&lt;div align="center"&gt;<br>#+BEGIN_SRC<br>ASCII Art<br>#+END_SRC<br>#+HTML:&lt;/div&gt;</pre>

Example:
#+HTML:<div align="center">
#+BEGIN_SRC
 /~~~\/~~\/~~~\/~~~\/~~\/~~~\                    /~~~\/~~\/~~~\/~~~\/~~\/~~~\
 | /\/ /\/ /\ || /\/ /\/ /\ |                    | /\ \/\ \/\ || /\ \/\ \/\ |
 \ \/ /\/ /\/ /\ \/ /\/ /\/ /                    \ \/\ \/\ \/ /\ \/\ \/\ \/ /
  \ \/\ \/\ \/  \ \/\ \/\ \/                      \/ /\/ /\/ /  \/ /\/ /\/ /
,_/\ \/\ \/\ \__/\ \/\ \/\ \______________________/ /\/ /\/ /\__/ /\/ /\/ /\_,
(__/\__/\__/\____/\__/\__/\________________________/\__/\__/\____/\__/\__/\__)
#+END_SRC
#+HTML:</div>

** Underlining
#+HTML:<p>Github honors the <code><a href="https://www.w3schools.com/TAGs/tag_ins.asp">insert</a></code> tag for underlining. Even though it's not specifically for underlining, it gets the job done.</p>

Syntax:
#+BEGIN_SRC
<ins>
</ins>
#+END_SRC

Example:
#+HTML:<pre>#+HTML:&lt;ins&gt;some underlined text&lt;/ins&gt;<br><br>or<br><br>#+BEGIN_HTML<br>&lt;ins&gt;<br>some underlined text<br>&lt;/ins&gt;<br>#+END_HTML</pre>
#+HTML:<caption>Result:</caption><br><ins>some underlined text</ins>
** Folding
This killer feature allows us to hide information in a fold. This is missing from org-mode, but fear not, HTML to the rescue.

#+HTML:<p>GitHub honors the <code><a href="https://www.w3schools.com/tags/tag_summary.asp">summary / details</a></code> tags for folding sections.</p>

Syntax:
#+BEGIN_SRC
<details>
<summary>The title text or heading of our fold</summary>
<p>Some hidden text</p>
</details>
#+END_SRC

Example:
#+HTML:<pre>#+BEGIN_HTML<br>&lt;details&gt;<br>&lt;summary&gt;Hidden Section - Click Me!&lt;summary&gt;<br>&lt;p&gt;Some hidden text&lt;/p&gt;<br>&lt;/details&gt;<br>#+END_HTML</pre>
*** Folding Org Syntax
You can use HTML inline calls to start a fold and end it later. Including folding regular org syntax.

#+HTML:<pre>#+HTML:&lt;details&gt;<br>#+HTML:&lt;summary&gt;&lt;b&gt;A Hidden Section - Click Me!&lt;/b&gt;&lt;/summary&gt;<br>* Org Heading<br>  Some text.<br>#+HTML:&lt;/details&gt;</pre>

Result:
#+HTML:<details>
#+HTML:<summary><b>A Hidden Section - Click Me!</b></summary>
**** Org Heading
Some text.
#+HTML:</details>
** Code
You can use both HTML and org-mode to generate code blocks. Each have their appropriate use cases.
*** Inline
=Looks like this.=

I use these to highlight commands and software where appropriate.
**** Org-mode

Syntax:
#+BEGIN_SRC
Verbatim:
=SOME INFO= <-- My first choice.

or

Code:
~SOME INFO~ <-- Useful if text inside has an equal sign.
#+END_SRC

Advantages:
- Useful for quick inline highlighting.
- Text in these strings is not processed for org specific syntax.

Disadvantages:
#+BEGIN_HTML
<ul>
<li>Does not always work on Github.</li>
<li>Cannot use org-mode link syntax to put a <code><a href="#org-syntax">link</a></code> inside of a code block.</li>
</ul>
#+END_HTML

**** HTML
#+HTML:<p>GitHub honors the <code><a href="https://www.w3schools.com/tags/tag_code.asp">code</a></code> tag for inline code blocks.</p>

Syntax:
#+BEGIN_SRC
<code>some text</code>
#+END_SRC

Example:
#+HTML:<pre>#+HTML:&lt;code&gt;some text&lt;/code&gt;<br><br>or<br><br>#+BEGIN_HTML<br>&lt;p&gt;This is an inline code with a &lt;code&gt;&lt;a href=""#html"&gt;link&lt;/a&gt;&lt;/code&gt;!&lt;/p&gt;<br>#+END_HTML</pre>

Result:
#+HTML:<p>This is an inline code block with a <code><a href="#html">link</a></code>!</p>

Advantages:
- More universal.
- Can include links and other formatting inside the code block.

Disadvantages:
- Not quick to use.

*** Block
#+HTML:<p>GitHub and org-ruby honor the <code><a href="https://www.w3schools.com/tags/tag_pre.asp">pre</a></code> tag for code blocks.</p>

Org syntax is translated through org-ruby to the pre tag. Here, org and HTML are very equivalent, except for one disadvantage shown below.

**** Org-mode
Syntax:
#+HTML:<pre>#+BEGIN_SRC<br>#+END_SRC<br><br>or<br><br>#+BEGIN_EXAMPLE<br>#+END_EXAMPLE</pre>

Example:
#+HTML:<pre>#+BEGIN_SRC<br>Some code<br>More code<br>#+END_SRC</pre>

Result:
#+BEGIN_SRC
Some code
More code
#+END_SRC

Advantages:
- Can write any language, except..

Disadvantages:
- Cannot write org-mode syntax inside.

**** HTML
Syntax:
#+BEGIN_SRC
<pre>some HTML</pre>
#+END_SRC

Example:
#+HTML:<pre>#+HTML:&lt;pre&gt;Some code or org-syntax: #+BEGIN_SRC&lt;/pre&gt;<br><br>or<br><br>#+BEGIN_HTML<br>&lt;pre&gt;<br>Some code<br>&lt;/pre&gt;<br>#+END_HTML</pre>

Advantages:
- The inline HTML org syntax can use org syntax in the code block.

Disadvantages:
- Not easy to use.
- To Write HTML inside an HTML code block, you must replace the tag brackets (< >) with &lt; and &gt; (&lt;tag element&gt;).
** Tables
Org-ruby translates org tables to HTML just fine, but has some shortcomings.

For regular tables, this is the faster and simpler approach.

If your only table customization goal is to center it, refer to [[#centering-org-tables][centering org tables]] above!

For more advanced formatting you may want an HTML table, which allows you to take advantage of aligning and other formatting.
*** HTML Tables From Org Tables.
Generate your table using org-mode, since it's quick and easy compared to writing an HTML table, and then export the table using the following technique.

1. Create your org table.
2. Use the command: org-html-export-as-html to export the current org document buffer to an HTML buffer.
3. Copy the HTML table into an HTML block in your org document, replacing the org table.
4. Apply any additional HTML formatting to your table.

** Shields
Shields are the little badges found on repositories all over GitHub to quickly and visually share information about the repository to the reader.

The only way to put shields in an org document is through HTML.

Here is the most used website to generate shields: [[https://shields.io/][shields.io]]

Just use the URL generated as the source for an image tag.

Syntax:
#+BEGIN_SRC
Without link:
<img src="https://img.shields.io/badge/Org-Document-%2377aa99?style=flat-square&logo=org&logoColor=white">

With link:
<a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-Document-%2377aa99?style=flat-square&logo=org&logoColor=white"></a>
#+END_SRC

Example:
#+HTML:<pre>#+HTML:&lt;a href="https://orgmode.org"&gt;&lt;img src="https://img.shields.io/badge/Org-Document-%2377aa99?style=flat-square&logo=org&logoColor=white"&gt;&lt;/a&gt;</pre>

Result:
#+HTML:<a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-Document-%2377aa99?style=flat-square&logo=org&logoColor=white"></a>

Tip:
I like to center my shields by enclosing it in a paragraph tag with an alignment attribute.

** Emojis
The only way to use emojis an org document on GitHub is through HTML.

1. Find the GitHub emoji you want to use.
2. Use the syntax :emoji_name: anywhere in a text field and the emoji will show up!

Example:
#+HTML:<pre>#+HTML:&lt;p&gt;Here is an emoji: :satisfied:&lt;/p&gt;</pre>

Result:
#+HTML:<p>Here is an emoji: :satisfied:</p>
