#+html:<h1 align="center">GitHub Org Mode Hacks</h1>
#+html: <p align="center"><a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-Document-%2377aa99?style=flat-square&logo=org&logoColor=white"> </a><a href="https://www.gnu.org/software/emacs/"><img src="https://img.shields.io/badge/Made_with-Emacs-blueviolet.svg?style=flat-square&logo=GNU%20Emacs&logoColor=white"></a></p>

#+html:<div align="center">
Sharing the undocumented things you can do with GitHub, org-mode, and HTML to make a better README.
#+HTML:</div>

#+begin_example :exports none
SECTIONS TO DO NEXT
Hiding Information
- Can be done using:
- :exports none on example or source blocks.
- I keep a private TODO list for this very repository here that you can't see!
- https://www.w3schools.com/TAGS/att_hidden.asp Potentiall hidden attribute.

Math Support
- Needs fleshed out...
- GitHub
- HTML
- Org
- Latex
  - GitHub now supports LaTeX syntax

NoWeb
- Needs fleshed out...

Quoting
- Centering block quote text
  - #+HTML:<div align="center"><blockquote>centered block quote</blockquote></div>
- Figure out other quoting possibilities.

Org Commands in Code Blocks
- Prepend the commands with , and then they'll magically work! Make this more explicit or give it's own section.

Making Custom SVGs
- Needs fleshed out..

HTML
- <warning>
- <kbd>
- Image alignment,
  - Href images can be aligned to center and left and right
  - Can be used to have text on left and images on the right

Needs research
- Captions
- Notes

Implement things from here but for org:
https://gist.github.com/ChrisTollefson/a3af6d902a74a0afd1c2d79aadc9bb3f
#+end_example

** Why?
The README, is your primary method to portray information about a repository to the reader. GitHub supports using =org-mode= to create a README, but it's implementation using =org-ruby= neither works as claimed nor is complete.

That's where these hacks come in, primarily using HTML, to get around these limitations, as well as to show some additional possibilities and preferences.

And, I haven't found anyone talking about these techniques, so I thought I would share them. Please consider submitting yours.
** Document Structure
This document covers methods to use org-mode and HTML together. The headings are sorted by the goal we want to achieve.

** Table of Contents
- [[#background][Background]]
- [[#html-in-org-documents][HTML in Org Documents]]
- [[#hiding-org-headings-on-github][Hiding Org Headings on GitHub]]
- [[#centering--text-alignment][Centering / Text Alignment]]
  - [[#centering-org-syntax][Org Syntax]]
  - [[#centering-org-tables][Org Tables]]
  - [[#centering-code-blocks][Code Blocks]]
- [[#underlining-1][Underlining]]
- [[#folding-1][Folding]]
- [[#code][Code]]
  - [[#inline-1][Inline]]
  - [[#block-1][Block]]
- [[#examples][Examples]]
- [[#hiding-code-and-example-blocks][Hiding Code and Example Blocks]]
- [[#tables][Tables]]
- [[#shields][Shields]]
- [[#emojis][Emojis]]

** Background
GitHub uses [[https://github.com/wallyqs/org-ruby][org-ruby]] to parse and export an org document as HTML, then it is sanitized using their [[https://github.com/gjtorikian/html-pipeline/blob/main/lib/html/pipeline/sanitization_filter.rb][HTML-pipeline]].

These documents allow us to understand what you can and can't do using org-mode and HTML on GitHub, but that work is summarized for you here.
*** org-ruby
This software translates org-mode files/syntax directly into HTML. The rules for translation are currently not modifiable. See org-ruby for the default translation list.

The problem with this, is that the translations used by GitHub/org-ruby are incomplete or outdated. Most things you can do with org-mode are supported, but some things are not.

** HTML in Org Documents

Please welcome our lord and savior, HTML! This is our primary method to overcome the limitations of org-ruby and Github.

Org-mode supports the use of two syntaxes for writing HTML in a document. The first is inline and the second is block.

*** Inline
Useful for one-liners.

Syntax:
#+begin_src
#+html:
#+end_src

Example:
#+begin_src html
#+html:<p>Some HTML paragraph</p>
#+end_src

*** Block
Useful for complex or multi-line HTML.

Syntax:
#+begin_example
#+begin_html
#+end_html
#+end_example

Example:
#+begin_src html
#+begin_html
<div>
<p>Some longer HTML!</p>
</div>
#+end_html
#+end_src

** Hiding Org Headings on GitHub

We can prevent headings from showing up on GitHub using a little known feature of org-ruby.

By including the following at the top of our document, we can use the tag =noexport= or =exclude= on headings that we don't want to show up on GitHub!

#+begin_example
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+TAGS: export noexport
#+end_example

This took me way too long to find from [[https://github.com/wallyqs/org-ruby/blob/master/spec/html_examples/export-tags.org][here]]. View the raw file [[https://raw.githubusercontent.com/wallyqs/org-ruby/master/spec/html_examples/export-tags.org][here]].

** Centering / Text Alignment
This is unfortunately broken in org-ruby, so we use HTML.

#+html:<p>The HTML attribute <code><a href="https://www.geeksforgeeks.org/html-align-attribute/">align</a></code> controls text alignment, including centering.</p>

Syntax:
#+begin_src html
<div align="center">
Some stuff
</div>
#+end_src

Alignment options:
#+begin_example
left
right
center
justify
#+end_example

The centering attribute can be applied to many elements, but I recommend using one of the following elements.

Recommended tags:
#+begin_src html
<div> <-- Recommended over <p>, as it works more often.
<p>
#+end_src

Example:
#+begin_src html
#+html:<div align="center">some centered stuff</div>

or

#+begin_html
<div align="center">
some centered stuff
</div>
#+end_html
#+end_src

Result:
#+html:<div align="center"><p>some centered stuff</p></div>

Wrapping other tags in these results in them also being centered as well, regardless if they can accept the alignment attribute themselves. You'll see this in the next sections.

*** Centering Org Syntax
You can use HTML inline calls to start a center alignment and end it later.

Example:
#+begin_src html
#+html:<div align="center">
,* Org Heading
  Some text.
#+html:</div>
#+end_src

Result:
#+html:<div align="center">
**** Org Heading
Some text.
#+html:</div>
*** Centering Org Tables
Centering org syntax includes the centering of org-tables.

Example:
#+begin_src html
#+html:<div align="center">
| org | table |
| foo | bar   |
#+html:</div>
#+end_src

Result:
#+html:<div align="center">
| org | table |
| foo | bar   |
#+html:</div>

*** Centering Code Blocks
It's also possible to center the text inside of a code block, not the block itself.

This is useful for posting ASCII art to your README.

Just use the div centering syntax on a code block, like in the previous example.

Syntax:
#+begin_src html
,#+html:<div align="center">
,#+begin_src
ASCII Art
,#+end_src
,#+html:</div>
#+end_src

Example:
#+html:<div align="center">
#+begin_src
 /~~~\/~~\/~~~\/~~~\/~~\/~~~\                    /~~~\/~~\/~~~\/~~~\/~~\/~~~\
 | /\/ /\/ /\ || /\/ /\/ /\ |                    | /\ \/\ \/\ || /\ \/\ \/\ |
 \ \/ /\/ /\/ /\ \/ /\/ /\/ /                    \ \/\ \/\ \/ /\ \/\ \/\ \/ /
  \ \/\ \/\ \/  \ \/\ \/\ \/                      \/ /\/ /\/ /  \/ /\/ /\/ /
,_/\ \/\ \/\ \__/\ \/\ \/\ \______________________/ /\/ /\/ /\__/ /\/ /\/ /\_,
(__/\__/\__/\____/\__/\__/\________________________/\__/\__/\____/\__/\__/\__)
#+end_src
#+html:</div>

** Underlining
#+html:<p>Github honors the <code><a href="https://www.w3schools.com/TAGs/tag_ins.asp">insert</a></code> tag for underlining. Even though it's not specifically for underlining, it gets the job done.</p>

Syntax:
#+begin_src html
<ins>
</ins>
#+end_src

Example:
#+begin_src html
,#+html:<ins>some underlined text</ins>

or

,#+begin_html
<ins>
some underlined text
</ins>
,#+end_html
#+end_src

#+html:<caption>Result:</caption><br><ins>some underlined text</ins>
** Folding
This killer feature allows us to hide information in a folded or hidden section.

#+html:<p>GitHub honors the <code><a href="https://www.w3schools.com/tags/tag_summary.asp">summary / details</a></code> tags for folding sections.</p>

Syntax:
#+begin_src html
<details>
<summary>The title text or heading of our fold</summary>
<p>Some hidden text</p>
</details>
#+end_src

Example:

#+begin_src html
#+begin_html
<details>
<summary>Hidden Section - Click Me!<summary>
<p>Some hidden text</p>
</details>
#+end_html
#+end_src

*** Folding Org Syntax
You can also use HTML inline calls to start a fold and end it later. Including folding regular org syntax.
#+begin_src html
#+html:<details>
#+html:<summary><b>A Hidden Section - Click Me!</b></summary>
,* Org Heading
  Some text.
#+html:</details>
#+end_src

Result:
#+html:<details>
#+html:<summary><b>A Hidden Section - Click Me!</b></summary>
**** Org Heading
Some text.
#+html:</details>
** Code
You can use both HTML and org-mode to generate code blocks. Each have their appropriate use cases.
*** Inline
=Looks like this.=

I use these to highlight commands and software where appropriate.
**** Org-mode

Syntax:
#+begin_src
Verbatim:
=SOME INFO= <-- My first choice.

or

Code:
~SOME INFO~ <-- Useful if text inside has an equal sign.
#+end_src

Advantages:
- Useful for quick inline highlighting.
- Text in these strings is not processed for org specific syntax.

Disadvantages:
#+begin_html
<ul>
<li>Does not always work on Github.</li>
<li>Cannot use org-mode link syntax to put a <code><a href="#org-syntax">link</a></code> inside of a code block.</li>
</ul>
#+end_html

**** HTML
#+html:<p>GitHub honors the <code><a href="https://www.w3schools.com/tags/tag_code.asp">code</a></code> tag for inline code blocks.</p>

Syntax:
#+begin_src html
<code>some text</code>
#+end_src

Example:
#+begin_src html
#+html:<code>some text</code>

or

#+begin_html
<p>This is an inline code with a <code><a href="#html">link</a></code>!</p>
#+end_html
#+end_src

Result:
#+html:<p>This is an inline code block with a <code><a href="#html">link</a></code>!</p>

Advantages:
- More universal.
- Can include links and other formatting inside the code block.

Disadvantages:
- Not quick to use.

*** Block
#+html:<p>GitHub and org-ruby honor the <code><a href="https://www.w3schools.com/tags/tag_pre.asp">pre</a></code> tag for code blocks.</p>

Here, org and HTML are very equivalent, except for one disadvantage shown below.

**** Org-mode
Syntax:
#+begin_src
,#+begin_src
,#+end_src

or

,#+begin_example
,#+end_example

#+end_src

Example:
#+begin_src
,#+begin_src
Some code
More code
,#+end_src
#+end_src

Result:
#+begin_src
Some code
More code
#+end_src

Advantages:
- Quick to write.
- Can write any language, including org-mode syntax. Just prepend an org command with a comma.

Disadvantages:
- Cannot include org-mode links inside inside.

**** HTML
Syntax:
#+begin_src html
<pre>some HTML</pre>
#+end_src

Example:
#+begin_src html
#+html:<pre>Some code or org-syntax: #+begin_src</pre>

or

#+begin_html
<pre>
Some code
</pre>
#+end_html
#+end_src

Advantages:
- The inline HTML org syntax can use org syntax in the code block.

Disadvantages:
- Not easy to use.
- To Write HTML inside an HTML code block, you must replace the tag brackets (< >) with &lt; and &gt; (&lt;tag element&gt;).
** Examples
I use strictly use org-mode for examples. Here, org-ruby works flawlessly.

*** Inline
A little known feature is that org has an inline example block.

Any line that begins with a colon (:) followed by a space becomes an example.

Syntax:
#+begin_example
: some inline example
#+end_example

Result:
: some inline example

*** Block
This is just a regular org example block. No different from a code block except that it doesn't have syntax highlighting.

Syntax:
#+begin_example
,#+begin_example
,#+end_example
#+end_example
** Hiding Code and Example Blocks
To prevent these from showing up on GitHub simply add =:exports none= to the =#+begin= statement for the block.
** Tables
Org-ruby translates org tables to HTML just fine, but has some shortcomings.

For regular tables, this is the faster and simpler approach.

If your only table customization goal is to center it, refer to [[#centering-org-tables][centering org tables]] above!

For more advanced formatting you may want an HTML table, which allows you to take advantage of aligning and other formatting.

Unfortunately, GitHub does not honor Org's table alignment syntax when exporting it through org-ruby.
*** HTML Tables From Org Tables.
Generate your table using org-mode, since it's quick and easy compared to writing an HTML table, and then export the table using the following technique.

1. Create your org table.
2. Use the command: org-html-export-as-html to export the current org document buffer to an HTML buffer.
3. Copy the HTML table into an HTML block in your org document, replacing the org table.
4. Apply any additional HTML formatting to your table.

** Shields
Shields are the little badges found on repositories all over GitHub to quickly and visually share information about the repository.

The only way to put shields in an org document is through HTML.

Here is the most used website to generate shields: [[https://shields.io/][shields.io]]

Just use the URL generated as the source for an image tag.

Syntax:
#+begin_src html
Without link:
<img src="image_url">

With link:
<a href="hyperlink"><img src="image_url"></a>
#+end_src

Example:
#+begin_src html
#+html:<a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-Document-%2377aa99?style=flat-square&logo=org&logoColor=white"></a>
#+end_src

Result:
#+html:<a href="https://orgmode.org"><img src="https://img.shields.io/badge/org-document-%2377aa99?style=flat-square&logo=org&logocolor=white"></a>

Tip:
I like to center my shields by enclosing it in a paragraph tag with an alignment attribute.

** Emojis

1. Find the GitHub emoji you want to use.
2. Use the syntax :emoji_name: anywhere in a text field and the emoji will show up!

Example:
: :satisfied:

Result:
Here is an emoji: :satisfied:
